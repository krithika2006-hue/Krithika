{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":2965537,"sourceType":"datasetVersion","datasetId":1818188}],"dockerImageVersionId":31040,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-05-26T15:18:56.056480Z","iopub.execute_input":"2025-05-26T15:18:56.056932Z","iopub.status.idle":"2025-05-26T15:18:56.070393Z","shell.execute_reply.started":"2025-05-26T15:18:56.056896Z","shell.execute_reply":"2025-05-26T15:18:56.069239Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/titanic-dataset/Titanic-Dataset.csv\n","output_type":"stream"}],"execution_count":346},{"cell_type":"code","source":"data = pd.read_csv('/kaggle/input/titanic-dataset/Titanic-Dataset.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T15:18:56.072078Z","iopub.execute_input":"2025-05-26T15:18:56.072432Z","iopub.status.idle":"2025-05-26T15:18:56.094095Z","shell.execute_reply.started":"2025-05-26T15:18:56.072397Z","shell.execute_reply":"2025-05-26T15:18:56.093139Z"}},"outputs":[],"execution_count":347},{"cell_type":"code","source":"print(data.head())\nprint(data.info())\nprint(data.describe())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T15:18:56.095272Z","iopub.execute_input":"2025-05-26T15:18:56.095978Z","iopub.status.idle":"2025-05-26T15:18:56.135429Z","shell.execute_reply.started":"2025-05-26T15:18:56.095941Z","shell.execute_reply":"2025-05-26T15:18:56.133982Z"}},"outputs":[{"name":"stdout","text":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  \n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Name         891 non-null    object \n 4   Sex          891 non-null    object \n 5   Age          714 non-null    float64\n 6   SibSp        891 non-null    int64  \n 7   Parch        891 non-null    int64  \n 8   Ticket       891 non-null    object \n 9   Fare         891 non-null    float64\n 10  Cabin        204 non-null    object \n 11  Embarked     889 non-null    object \ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.7+ KB\nNone\n       PassengerId    Survived      Pclass         Age       SibSp  \\\ncount   891.000000  891.000000  891.000000  714.000000  891.000000   \nmean    446.000000    0.383838    2.308642   29.699118    0.523008   \nstd     257.353842    0.486592    0.836071   14.526497    1.102743   \nmin       1.000000    0.000000    1.000000    0.420000    0.000000   \n25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n75%     668.500000    1.000000    3.000000   38.000000    1.000000   \nmax     891.000000    1.000000    3.000000   80.000000    8.000000   \n\n            Parch        Fare  \ncount  891.000000  891.000000  \nmean     0.381594   32.204208  \nstd      0.806057   49.693429  \nmin      0.000000    0.000000  \n25%      0.000000    7.910400  \n50%      0.000000   14.454200  \n75%      0.000000   31.000000  \nmax      6.000000  512.329200  \n","output_type":"stream"}],"execution_count":348},{"cell_type":"code","source":"print(data.isnull().sum)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T15:18:56.137516Z","iopub.execute_input":"2025-05-26T15:18:56.137909Z","iopub.status.idle":"2025-05-26T15:18:56.152094Z","shell.execute_reply.started":"2025-05-26T15:18:56.137875Z","shell.execute_reply":"2025-05-26T15:18:56.150851Z"}},"outputs":[{"name":"stdout","text":"<bound method DataFrame.sum of      PassengerId  Survived  Pclass   Name    Sex    Age  SibSp  Parch  Ticket  \\\n0          False     False   False  False  False  False  False  False   False   \n1          False     False   False  False  False  False  False  False   False   \n2          False     False   False  False  False  False  False  False   False   \n3          False     False   False  False  False  False  False  False   False   \n4          False     False   False  False  False  False  False  False   False   \n..           ...       ...     ...    ...    ...    ...    ...    ...     ...   \n886        False     False   False  False  False  False  False  False   False   \n887        False     False   False  False  False  False  False  False   False   \n888        False     False   False  False  False   True  False  False   False   \n889        False     False   False  False  False  False  False  False   False   \n890        False     False   False  False  False  False  False  False   False   \n\n      Fare  Cabin  Embarked  \n0    False   True     False  \n1    False  False     False  \n2    False   True     False  \n3    False  False     False  \n4    False   True     False  \n..     ...    ...       ...  \n886  False   True     False  \n887  False  False     False  \n888  False   True     False  \n889  False  False     False  \n890  False   True     False  \n\n[891 rows x 12 columns]>\n","output_type":"stream"}],"execution_count":349},{"cell_type":"code","source":"# Check for missing values\nprint(data.isnull().sum())\n\n# Method 1: Fill with mean\ndata['Age'] = data['Age'].fillna(data['Age'].mean())\n\n# Method 2: Fill with median\ndata['Age'] = data['Age'].fillna(data['Age'].median())\n\n# Method 3: Drop rows (if too many nulls)\ndata = data.dropna()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T15:18:56.152822Z","iopub.execute_input":"2025-05-26T15:18:56.153179Z","iopub.status.idle":"2025-05-26T15:18:56.178294Z","shell.execute_reply.started":"2025-05-26T15:18:56.153154Z","shell.execute_reply":"2025-05-26T15:18:56.176802Z"}},"outputs":[{"name":"stdout","text":"PassengerId      0\nSurvived         0\nPclass           0\nName             0\nSex              0\nAge            177\nSibSp            0\nParch            0\nTicket           0\nFare             0\nCabin          687\nEmbarked         2\ndtype: int64\n","output_type":"stream"}],"execution_count":350},{"cell_type":"code","source":"print(data[['Embarked_Q', 'Embarked_S']].head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T15:18:56.179268Z","iopub.execute_input":"2025-05-26T15:18:56.179606Z","iopub.status.idle":"2025-05-26T15:18:56.204034Z","shell.execute_reply.started":"2025-05-26T15:18:56.179585Z","shell.execute_reply":"2025-05-26T15:18:56.202493Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_35/430004898.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Embarked_Q'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'Embarked_S'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   4106\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_iterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4107\u001b[0m                 \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4108\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_indexer_strict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"columns\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4109\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4110\u001b[0m         \u001b[0;31m# take() does not accept boolean indexers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_get_indexer_strict\u001b[0;34m(self, key, axis_name)\u001b[0m\n\u001b[1;32m   6198\u001b[0m             \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_indexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reindex_non_unique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6199\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6200\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_raise_if_missing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6201\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6202\u001b[0m         \u001b[0mkeyarr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_raise_if_missing\u001b[0;34m(self, key, indexer, axis_name)\u001b[0m\n\u001b[1;32m   6247\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mnmissing\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6248\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mnmissing\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6249\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"None of [{key}] are in the [{axis_name}]\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6250\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6251\u001b[0m             \u001b[0mnot_found\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mensure_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmissing_mask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnonzero\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: \"None of [Index(['Embarked_Q', 'Embarked_S'], dtype='object')] are in the [columns]\""],"ename":"KeyError","evalue":"\"None of [Index(['Embarked_Q', 'Embarked_S'], dtype='object')] are in the [columns]\"","output_type":"error"}],"execution_count":351},{"cell_type":"code","source":"print(data.columns)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T15:18:56.204454Z","iopub.status.idle":"2025-05-26T15:18:56.204736Z","shell.execute_reply.started":"2025-05-26T15:18:56.204572Z","shell.execute_reply":"2025-05-26T15:18:56.204583Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(data['Sex'].isnull().sum())\nprint(data[['Embarked_Q', 'Embarked_S']].head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T15:18:56.206269Z","iopub.status.idle":"2025-05-26T15:18:56.206543Z","shell.execute_reply.started":"2025-05-26T15:18:56.206419Z","shell.execute_reply":"2025-05-26T15:18:56.206431Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"scaler = StandardScaler()\ndata[['Age', 'Fare']] = scaler.fit_transform(data[['Age', 'Fare']])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T15:18:56.207662Z","iopub.status.idle":"2025-05-26T15:18:56.207941Z","shell.execute_reply.started":"2025-05-26T15:18:56.207815Z","shell.execute_reply":"2025-05-26T15:18:56.207826Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"scaler = StandardScaler()\ndata[['Age', 'Fare']] = scaler.fit_transform(data[['Age', 'Fare']])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T15:18:56.210354Z","iopub.status.idle":"2025-05-26T15:18:56.210764Z","shell.execute_reply.started":"2025-05-26T15:18:56.210618Z","shell.execute_reply":"2025-05-26T15:18:56.210632Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"scaler = StandardScaler()\ndata[['Age', 'Fare']] = scaler.fit_transform(data[['Age', 'Fare']])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T15:18:56.211649Z","iopub.status.idle":"2025-05-26T15:18:56.211967Z","shell.execute_reply.started":"2025-05-26T15:18:56.211823Z","shell.execute_reply":"2025-05-26T15:18:56.211839Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(X.shape)\nif X.shape[0] > 0:\n    X_scaled = StandardScaler().fit_transform(X)\nelse:\n    print(\"Empty input to scaler.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T15:19:29.830448Z","iopub.execute_input":"2025-05-26T15:19:29.830760Z","iopub.status.idle":"2025-05-26T15:19:29.843212Z","shell.execute_reply.started":"2025-05-26T15:19:29.830739Z","shell.execute_reply":"2025-05-26T15:19:29.841880Z"}},"outputs":[{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_35/1209935395.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0mX_scaled\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mStandardScaler\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Empty input to scaler.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'X' is not defined"],"ename":"NameError","evalue":"name 'X' is not defined","output_type":"error"}],"execution_count":352},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\n\n# Example: define X with selected numerical columns\nX = data[['Age', 'Fare']]  # replace with actual column names you want to scale\n\nprint(X.shape)\nif X.shape[0] > 0:\n    X_scaled = StandardScaler().fit_transform(X)\nelse:\n    print(\"Empty input to scaler.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T15:20:15.895900Z","iopub.execute_input":"2025-05-26T15:20:15.896476Z","iopub.status.idle":"2025-05-26T15:20:15.906196Z","shell.execute_reply.started":"2025-05-26T15:20:15.896454Z","shell.execute_reply":"2025-05-26T15:20:15.905201Z"}},"outputs":[{"name":"stdout","text":"(202, 2)\n","output_type":"stream"}],"execution_count":354},{"cell_type":"code","source":"from sklearn.preprocessing import StandardScaler\n\n# Define X with actual numeric columns from your dataset\nX = data[['Age', 'Fare']]  # You can change this to any numeric columns you want\n\n# Check if X has data\nprint(X.shape)\nif X.shape[0] > 0:\n    X_scaled = StandardScaler().fit_transform(X)\n    print(\"Scaling successful. Scaled shape:\", X_scaled.shape)\nelse:\n    print(\"Empty input to scaler.\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T15:20:54.938412Z","iopub.execute_input":"2025-05-26T15:20:54.938684Z","iopub.status.idle":"2025-05-26T15:20:54.949209Z","shell.execute_reply.started":"2025-05-26T15:20:54.938666Z","shell.execute_reply":"2025-05-26T15:20:54.948169Z"}},"outputs":[{"name":"stdout","text":"(202, 2)\nScaling successful. Scaled shape: (202, 2)\n","output_type":"stream"}],"execution_count":355},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\n# Step 1: Select categorical columns to encode\ncategorical_cols = ['Sex', 'Embarked']  # adjust based on your dataset\ndata = data.dropna(subset=categorical_cols)  # drop rows with missing values in cat cols\n\n# Step 2: One-hot encode the categorical variables\nencoded_cat = pd.get_dummies(data[categorical_cols], drop_first=True)\n\n# Step 3: Combine scaled numerical and encoded categorical features\nX_final = np.hstack((X_scaled, encoded_cat.values))\n\n# Step 4: Define target variable\ny = data['Survived']  # or whatever your target column is\n\n# Step 5: Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X_final, y, test_size=0.2, random_state=42)\n\nprint(\"X_train shape:\", X_train.shape)\nprint(\"y_train shape:\", y_train.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T15:22:22.660101Z","iopub.execute_input":"2025-05-26T15:22:22.660385Z","iopub.status.idle":"2025-05-26T15:22:22.673974Z","shell.execute_reply.started":"2025-05-26T15:22:22.660366Z","shell.execute_reply":"2025-05-26T15:22:22.673053Z"}},"outputs":[{"name":"stdout","text":"X_train shape: (161, 5)\ny_train shape: (161,)\n","output_type":"stream"}],"execution_count":357},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n\n# Step 1: Create and train the model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Step 2: Predict on test data\ny_pred = model.predict(X_test)\n\n# Step 3: Evaluate the model\nprint(\"Accuracy:\", accuracy_score(y_test, y_pred))\nprint(\"Confusion Matrix:\\n\", confusion_matrix(y_test, y_pred))\nprint(\"Classification Report:\\n\", classification_report(y_test, y_pred))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-26T15:23:01.802234Z","iopub.execute_input":"2025-05-26T15:23:01.802529Z","iopub.status.idle":"2025-05-26T15:23:01.938626Z","shell.execute_reply.started":"2025-05-26T15:23:01.802509Z","shell.execute_reply":"2025-05-26T15:23:01.937166Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 0.8780487804878049\nConfusion Matrix:\n [[ 8  0]\n [ 5 28]]\nClassification Report:\n               precision    recall  f1-score   support\n\n           0       0.62      1.00      0.76         8\n           1       1.00      0.85      0.92        33\n\n    accuracy                           0.88        41\n   macro avg       0.81      0.92      0.84        41\nweighted avg       0.92      0.88      0.89        41\n\n","output_type":"stream"}],"execution_count":358}]}